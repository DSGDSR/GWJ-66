[gd_scene load_steps=2 format=3 uid="uid://bj4ulwvdo6340"]

[sub_resource type="GDScript" id="GDScript_04n3l"]
script/source = "extends OptionButton

func _ready() -> void:
	_populate_items()
	item_selected.connect(_change_window_mode)
	select(1) # TODO pick from settings

func _populate_items() -> void:
	for mode in Enums.WINDOW_MODE.values():
		add_item(Enums.WINDOW_MODE_LABEL[mode], mode)

func _change_window_mode(selection: Enums.WINDOW_MODE) -> void:
	match selection:
		Enums.WINDOW_MODE.WINDOW:
			DisplayServer.window_set_mode(DisplayServer.WINDOW_MODE_WINDOWED)
			DisplayServer.window_set_flag(DisplayServer.WINDOW_FLAG_BORDERLESS, false)
		Enums.WINDOW_MODE.FULLSCREEN:
			DisplayServer.window_set_mode(DisplayServer.WINDOW_MODE_FULLSCREEN)
			DisplayServer.window_set_flag(DisplayServer.WINDOW_FLAG_BORDERLESS, false)
		Enums.WINDOW_MODE.BORDERLESS_FS:
			DisplayServer.window_set_mode(DisplayServer.WINDOW_MODE_FULLSCREEN)
			DisplayServer.window_set_flag(DisplayServer.WINDOW_FLAG_BORDERLESS, true)
		Enums.WINDOW_MODE.BORDERLESS_WINDOW:
			DisplayServer.window_set_mode(DisplayServer.WINDOW_MODE_WINDOWED)
			DisplayServer.window_set_flag(DisplayServer.WINDOW_FLAG_BORDERLESS, true)
"

[node name="DisplayModeSelector" type="OptionButton"]
selected = 0
script = SubResource("GDScript_04n3l")
